#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# make_silo - Creates a skeleton folder and file structure for a partial
#             mirror that uses reprepro to populate itself
#
# usage: make_silo project.repo.rel.arch
#
# NOTE - this script MUST be run as the `reprepro` user - use:
#
# sudo -u reprepro bash
#
# Copyright (C) 2014-2015 Ralph Hempel <rhempel@hempeldesigngroup.com>
#
# See LICENSE for https://github.com/rhempel/growrepo
# -----------------------------------------------------------------------------

set -e

# ---------------------------------------------------------------------------
# Make sure we're being called as `make_silo` and that the folders we need
# exist

SOURCE_ROOT="${BASH_SOURCE%/make_silo}"

. ${SOURCE_ROOT}/bashtools/src/fmt
. ${SOURCE_ROOT}/bashtools/src/checkutil

LOG_LEVEL="4"

# -----------------------------------------------------------------------------

info "Executing $0"

[[ -z "$1" ]] && fail "Usage: make_silo project.repo.rel.arch"

# -----------------------------------------------------------------------------
# Check to make sure we are running as the reprepro user

checkuser "reprepro"

FARM="${SOURCE_ROOT}/farms/$1"

checkemptyvar "FARM"

[[ -d "${FARM}" ]] || fail "\"${FARM}\" -> farm directory does not exist"

# ------------------------------------------------------------------------------
# Note: This will create /srv/reprepro/.gnupg/gpg-agent.conf if it does not
#       already exist - we need to do this early so that gpg-agent can be
#       used to sign the repos later. This script seems to be the logical
#       place to create the file - aminly because this script MUST be run
#       as the reprepro user.
#

[[ -d "/srv/reprepro/.gnupg"                ]] || mkdir "/srv/reprepro/.gnupg"

if [[ -e "/srv/reprepro/.gnupg/gpg-agent.conf" ]]; then
    info "\"/srv/reprepro/.gnupg/gpg-agent.conf\" already exits"
else
    info "Creating \"/srv/reprepro/.gnupg/gpg-agent.conf\" ..."

    cat <<EOF > "/srv/reprepro/.gnupg/gpg-agent.conf"
pinentry-program /usr/bin/pinentry-curses
default-cache-ttl 1800
EOF

    chmod 600 "/srv/reprepro/.gnupg/gpg-agent.conf"
fi

#
# ---------------------------------------------------------------------------
# Now source the project specific farm parameters, set up variables and 
# run germinate - there are no default values, everything MUST be defined

. "${FARM}/conf"

checkemptyvar "PROJ"
checkemptyvar "REPO"
checkemptyvar "DIST"
checkemptyvar "REL"
checkemptyvar "ARCH"

PRRA="${PROJ}.${REPO}.${REL}.${ARCH}"
RRA="${REPO}.${REL}.${ARCH}"

[[ "$1" = "${PRRA}"          ]] || fail "\"$1\" does not match conf \"${PRRA}"\"

[[ -d "/srv/reprepro/${RRA}" ]] && fail "\"/srv/reprepro/${RRA}\" -> repo directory already exists"

# ---------------------------------------------------------------------------
# We can now start creating the directory/folder structure required by
# reprepro - we'll fill in the templates with default values

info "Creating \"/srv/reprepro/${RRA}\""

for d in "conf" "logs" "www"; do
    mkdir -p "/srv/reprepro/${RRA}/$d"
done

# ---------------------------------------------------------------------------

info "Creating \"/srv/reprepro/${RRA}/conf/options\""

cat <<EOF > "/srv/reprepro/${RRA}/conf/options"
outdir +b/www
logdir +b/logs
EOF

# ---------------------------------------------------------------------------

info "Creating \"/srv/reprepro/${RRA}/conf/distributions\""

cat <<EOF > "/srv/reprepro/${RRA}/conf/distributions"
Codename: ${REL}
Architectures: ${ARCH}
Description: ${PROJ} ${DESC}
Components: ${COMPONENTS//,/ }
Update: - ${RRA}
SignWith: ${SIGN_GPG_KEY}
EOF

# ---------------------------------------------------------------------------

info "Creating \"/srv/reprepro/${RRA}/conf/updates\""

cat <<EOF > "/srv/reprepro/${RRA}/conf/updates"
Name: ${RRA} 
Method: ${MIRROR}
VerifyRelease: ${REPO_GPG_KEY}
Suite: ${REL}
Components: ${COMPONENTS//,/ }
Architectures: ${ARCH}
FilterList: purge ../packages
GetInRelease: no
EOF

# ------------------------------------------------------------------------------
# Note: This will create /srv/reprepro/.gnupg if it does not already exist

info "Getting GPG key for \"${MIRROR}\""

gpg2 --keyserver "pgp.mit.edu" --recv-keys ${REPO_GPG_KEY}

# ------------------------------------------------------------------------------
info "Done" 
# ------------------------------------------------------------------------------
